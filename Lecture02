HOW CODE IS EXECUTED?
The javascript code is executed in the two phases they are:
Memory allocation phase and the code execution phase
Inintially in the memory allocation all the variables and functions code all are assumed as the undefined and allocated like that
Code execution phase:in this phase the variable of n is undefined in the memory allocation is undefine so now the n=32 in the code so this will be stored instead of the undefined in the variable which is called as spatial value
The another thing we have to rememeber that if there is a function is invoked which means the function is reused then again the new exection context is created of both phases of the memory allocation and the code allocation of every function in the code phase
Callstack:
Call stack is like a stack every time in the bottom of the stack it has the global execution context ..
the whole execution context(code and memory phase) is present in the call stack
What is mean by the callstack?
Callstack is defined that it maintains the order of execution of the execution context

Simply javascript is defined that it a programming language and 
the main purpose of the javascript in the web development is that every web pages add the javascript programs for the dynamic behaviour and the interactivity
These can also can be described that we can easily write the content in the web page and so that it will not reload the page again and again in the web browser
Every web browser uses the own javascript engine and this javascript engine 1. Whenever any JavaScript code is executed an execution context is created and it is the Global Execution Context.
 2. An Execution Context is basically a box which has two components called Memory Component(Variable Environment) and Code Component(Thread Of Execution). 
3. The Execution context is created in two phases a.
Memory Creation Phase : In this Phase, Memory is allocated to all the variables and functions which are present in the global scope. Special keyword Undefined in case of variables and literally the whole function in case of functions. b. Code Execution Phase :
In this Phase, code is executed line by line.
 4. Whenever there is a function invocation an all new execution context is created and same process is followed again.
 5. If there is any function parameter then it is also allocated memory while creating the execution context of the function.
 6. Whenever return keyword is encountered , it means the task of function is over and it returns back the control of the program back to the place where it was invoked. and with this this execution context is deleted from stack. 
7. Call Stack is basically a stack which maintains the order of execution of execution context. Whenever a code is executed the Global Execution Context is pushed into the stack first and later on as per the function invocation the execution context is pushed into the stack. 
When the function code is done executing the execution context is popped out and last the Global Execution Context s also deleted.
And the call stack also called as the machine stack, program stack, control stack, runtime stack and also execution context stack
How many types we can integrate the javascript:

1)Inline javascript: in this type of javascript we can easily integrate the javascript code into the html code
Like script tags and some of the event attributes like onclick
2)internal javascript:adding the script tags in the html
3)external javascript: adding the script.js and keeping the address in the html
Include the script tag in the hea file document of the html
<script src=”src.js”></script>
                                             3 ways of declaring  Variables in the javascript
1)var
2)let
3)const
1)Var: the var is a way of using in the older code and specifically it is used n the function based code and also it can e changeable
The main feature of the var is that it is hoisted and function specific..and the var main feature is that whenever a variable is declared with var then automatically we have to understood that the variable is hoisted which means this variable is initialized as the undefined even before the variable is used /declared
2)let:let is where it is not hoisted and also it is block spefic
Let cannot be redcalred again and again in the same specific block
3)const:it is immutable and also once assigned it is constant and cannot be changed
                                          Data types in the javascript:
1)primitive data types:string,numbers etc
2)non primitive data types :objects,arrays
Other data types are also number string undefined Boolean
Unefined means it is initialized but not decalred
How to create objects in the javascript:
Const user{
Name=lakshmi;
Age=21;
}
Result: given in the results like objects
Operators in the javascript:
Arthimetic,assignment,logical,bitwise,ternary,unary,comparision
Arthimetic:+,-,/,*,++,--
Assignment:=,=+,=+,-=,=-
Logical:&&,||,!
Bitwise:&,|,~,^,>>,<<
Teranary:|?.....unary:typeof,instanceof…comparison:==,!=,===
                   How the comparison operators work??important
Let first=20//number
Let third=”20”//string
Here how the magic works:
Console.log(first==third)//equality operator
Returns false because one type is string and the other type is the number
Console.log(first===third)the strict equality opetrtor
Here this strict equal operator checks the value and the type of the variable is same or not
The value is same but the type is not same so it returns the false
Here comes the magic part:
Console.log(first!=third)
**here we observe that natuarally as we all are human beings we tend that the first variable is the 20 and second variable also 20 however one is the string and the second one is the number 
First!=second means yes it is true because those data types are not same
However as we all know javascript is the most hated and lovable language both sides we can finally conclude that there is loosely cohersion is identified in the != operator 
What it actually do is that first type is the number 
And the second type is the string so lets conver the string to the number so that both will be equal
So if we asked that first!=second means this opertoar will say that it is false and those are equal because that operatot is coverted defaultly and we cant do anything with that
. 1. We learnt how functions work in JS.
 2. At first a global execution context is created, which consists of Memory and code and has 2 phases: Memory allocation phase and code execution phase. 
3. In the first phase, the variables are assigned "undefined" while functions have their own code. 
4. Whenever there is a function declaration in the code, a separate local execution context gets created having its own phases and is pushed into the call stack. 5. Once the function ends, the EC is removed from the call stack. 
6. When the program ends, even the global EC is pulled out of the call stack.
